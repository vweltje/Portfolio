{"version":3,"file":"0.5ddb9842ce1c6ba9407a.hot-update.js","sources":["webpack:///./src/templates/TravelsPage.js"],"sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Location } from '@reach/router'\nimport qs from 'qs'\n\nimport PostSection from '../components/PostSection'\nimport PostCategoriesNav from '../components/PostCategoriesNav'\nimport Layout from '../components/Layout'\nimport Nav from '../components/Nav'\nimport Image from '../components/Image'\n\n/**\n * Filter posts by date. Feature dates will be fitered\n * When used, make sure you run a cronejob each day to show schaduled content. See docs\n *\n * @param {posts} object\n */\nexport const byDate = posts => {\n  const now = Date.now()\n  return posts.filter(post => Date.parse(post.date) <= now)\n}\n\n/**\n * filter posts by category.\n *\n * @param {posts} object\n * @param {title} string\n * @param {contentType} string\n */\nexport const byCategory = (posts, title, contentType) => {\n  const isCategory = contentType === 'travelCountries'\n  const byCategory = post =>\n    post.categories &&\n    post.categories.filter(cat => cat.category === title).length\n  return isCategory ? posts.filter(byCategory) : posts\n}\n\n// Export Template for use in CMS preview\nexport const TravelsPageTemplate = ({\n  title,\n  posts = [],\n  travelCountries = [],\n  enableSearch = true,\n  contentType\n}) => (\n  <Location>\n    {({ location }) => {\n      let filteredPosts =\n        posts && !!posts.length\n          ? byCategory(byDate(posts), title, contentType)\n          : []\n\n      let queryObj = location.search.replace('?', '')\n      queryObj = qs.parse(queryObj)\n\n      if (enableSearch && queryObj.s) {\n        const searchTerm = queryObj.s.toLowerCase()\n        filteredPosts = filteredPosts.filter(post =>\n          post.frontmatter.title.toLowerCase().includes(searchTerm)\n        )\n      }\n\n      return (\n        <main className=\"Blog\">\n          <div className=\"Container\">\n            <div className=\"Container--Left\">\n              <div className=\"Overlay\" />\n              <Image\n                background\n                src=\"https://ucarecdn.com/e3c21782-456f-47cd-a1a0-e43926590771/\"\n                resolutions=\"large\"\n                alt=\"Home - Vincent is happy at a temple in Mexico\"\n                className=\"Align--Bottom\"\n              />\n              <span className=\"Caption\">Hierve El Agua - Mexico</span>\n            </div>\n            <div className=\"Container--Right\">\n              <Nav />\n              <div className=\"Content\">\n                <h1>Travel</h1>\n                <h2>Eat, sleap, travel repeat</h2>\n                <p>\n                  Travel is my greates passion, backpacking road triping or just\n                  a ride around town. I love beeing on the move, and seeing new\n                  things.\n                </p>\n                {!!travelCountries.length && (\n                  <PostCategoriesNav\n                    enableSearch\n                    categories={travelCountries}\n                  />\n                )}\n                {!!posts.length && <PostSection posts={filteredPosts} />}\n              </div>\n            </div>\n          </div>\n        </main>\n      )\n    }}\n  </Location>\n)\n\n// Export Default TravelsPage for front-end\nconst TravelsPage = ({ data: { page, posts, travelCountries } }) => (\n  <Layout\n    meta={page.frontmatter.meta || false}\n    title={page.frontmatter.title || false}\n  >\n    <TravelsPageTemplate\n      {...page}\n      {...page.fields}\n      {...page.frontmatter}\n      posts={posts.edges.map(post => ({\n        ...post.node,\n        ...post.node.frontmatter,\n        ...post.node.fields\n      }))}\n      travelCountries={travelCountries.edges.map(post => ({\n        ...post.node,\n        ...post.node.frontmatter,\n        ...post.node.fields\n      }))}\n    />\n  </Layout>\n)\n\nexport default TravelsPage\n\nexport const pageQuery = graphql`\n  ## Query for TravelsPage data\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\n  ## $id is processed via gatsby-node.js\n  ## query name must be unique to this file\n  query TravelsPage($id: String!) {\n    page: markdownRemark(id: { eq: $id }) {\n      ...Meta\n      fields {\n        contentType\n      }\n      frontmatter {\n        title\n        excerpt\n        template\n        subtitle\n        featuredImage\n      }\n    }\n\n    posts: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"posts\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            categories {\n              category\n            }\n            featuredImage\n          }\n        }\n      }\n    }\n    travelCountries: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"travelCountries\" } } }\n      sort: { order: ASC, fields: [frontmatter___title] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAFA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AA5DA;AACA;AAgEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAKA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAsBA;AAAA;AAEA;;;;;;;;;;;;AA/GA;AAYA;AASA;AAiEA;AAyBA;;;;;;;;;;A","sourceRoot":""}